//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BTIDataBaseProj
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Data.Common;

    public partial class BTIDataBaseEntities : DbContext
    {
        public BTIDataBaseEntities()
            : base("name=BTIDataBaseEntities")
        {
        }

        public BTIDataBaseEntities(string stringConnection)
            : base(stringConnection ?? "name=BTIDataBaseEntities")
        {

        }

        public BTIDataBaseEntities(DbConnection conn) : base(conn, true)
        {

        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BuildingsTable> BuildingsTable { get; set; }
        public virtual DbSet<FlatsTable> FlatsTable { get; set; }
        public virtual DbSet<RoomsTable> RoomsTable { get; set; }
    
        public virtual int AddBuilding(string kadastr, string address, string district, Nullable<int> land, Nullable<int> year, string material, string @base, Nullable<int> flow, Nullable<int> line, Nullable<int> square, Nullable<int> flats, string comments, Nullable<int> wear, byte[] picture, Nullable<bool> elevator)
        {
            var kadastrParameter = kadastr != null ?
                new ObjectParameter("kadastr", kadastr) :
                new ObjectParameter("kadastr", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var districtParameter = district != null ?
                new ObjectParameter("district", district) :
                new ObjectParameter("district", typeof(string));
    
            var landParameter = land.HasValue ?
                new ObjectParameter("land", land) :
                new ObjectParameter("land", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var materialParameter = material != null ?
                new ObjectParameter("material", material) :
                new ObjectParameter("material", typeof(string));
    
            var baseParameter = @base != null ?
                new ObjectParameter("base", @base) :
                new ObjectParameter("base", typeof(string));
    
            var flowParameter = flow.HasValue ?
                new ObjectParameter("flow", flow) :
                new ObjectParameter("flow", typeof(int));
    
            var lineParameter = line.HasValue ?
                new ObjectParameter("line", line) :
                new ObjectParameter("line", typeof(int));
    
            var squareParameter = square.HasValue ?
                new ObjectParameter("square", square) :
                new ObjectParameter("square", typeof(int));
    
            var flatsParameter = flats.HasValue ?
                new ObjectParameter("flats", flats) :
                new ObjectParameter("flats", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            var wearParameter = wear.HasValue ?
                new ObjectParameter("wear", wear) :
                new ObjectParameter("wear", typeof(int));
    
            var pictureParameter = picture != null ?
                new ObjectParameter("picture", picture) :
                new ObjectParameter("picture", typeof(byte[]));
    
            var elevatorParameter = elevator.HasValue ?
                new ObjectParameter("elevator", elevator) :
                new ObjectParameter("elevator", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBuilding", kadastrParameter, addressParameter, districtParameter, landParameter, yearParameter, materialParameter, baseParameter, flowParameter, lineParameter, squareParameter, flatsParameter, commentsParameter, wearParameter, pictureParameter, elevatorParameter);
        }
    
        public virtual int AddFlat(string buildingKadastr, Nullable<int> flat, Nullable<int> storey, Nullable<int> rooms, Nullable<int> squareFlat, Nullable<int> dwell, Nullable<int> branch, Nullable<int> height, Nullable<bool> level, Nullable<int> balcony)
        {
            var buildingKadastrParameter = buildingKadastr != null ?
                new ObjectParameter("buildingKadastr", buildingKadastr) :
                new ObjectParameter("buildingKadastr", typeof(string));
    
            var flatParameter = flat.HasValue ?
                new ObjectParameter("flat", flat) :
                new ObjectParameter("flat", typeof(int));
    
            var storeyParameter = storey.HasValue ?
                new ObjectParameter("storey", storey) :
                new ObjectParameter("storey", typeof(int));
    
            var roomsParameter = rooms.HasValue ?
                new ObjectParameter("rooms", rooms) :
                new ObjectParameter("rooms", typeof(int));
    
            var squareFlatParameter = squareFlat.HasValue ?
                new ObjectParameter("squareFlat", squareFlat) :
                new ObjectParameter("squareFlat", typeof(int));
    
            var dwellParameter = dwell.HasValue ?
                new ObjectParameter("dwell", dwell) :
                new ObjectParameter("dwell", typeof(int));
    
            var branchParameter = branch.HasValue ?
                new ObjectParameter("branch", branch) :
                new ObjectParameter("branch", typeof(int));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("height", height) :
                new ObjectParameter("height", typeof(int));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(bool));
    
            var balconyParameter = balcony.HasValue ?
                new ObjectParameter("balcony", balcony) :
                new ObjectParameter("balcony", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddFlat", buildingKadastrParameter, flatParameter, storeyParameter, roomsParameter, squareFlatParameter, dwellParameter, branchParameter, heightParameter, levelParameter, balconyParameter);
        }
    
        public virtual int AddRoom(Nullable<int> flat, Nullable<int> record, Nullable<int> squareRoom, string size, string name, Nullable<int> heightRoom, Nullable<int> socket, Nullable<int> section, string decoretion)
        {
            var flatParameter = flat.HasValue ?
                new ObjectParameter("flat", flat) :
                new ObjectParameter("flat", typeof(int));
    
            var recordParameter = record.HasValue ?
                new ObjectParameter("record", record) :
                new ObjectParameter("record", typeof(int));
    
            var squareRoomParameter = squareRoom.HasValue ?
                new ObjectParameter("squareRoom", squareRoom) :
                new ObjectParameter("squareRoom", typeof(int));
    
            var sizeParameter = size != null ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var heightRoomParameter = heightRoom.HasValue ?
                new ObjectParameter("heightRoom", heightRoom) :
                new ObjectParameter("heightRoom", typeof(int));
    
            var socketParameter = socket.HasValue ?
                new ObjectParameter("socket", socket) :
                new ObjectParameter("socket", typeof(int));
    
            var sectionParameter = section.HasValue ?
                new ObjectParameter("section", section) :
                new ObjectParameter("section", typeof(int));
    
            var decoretionParameter = decoretion != null ?
                new ObjectParameter("decoretion", decoretion) :
                new ObjectParameter("decoretion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRoom", flatParameter, recordParameter, squareRoomParameter, sizeParameter, nameParameter, heightRoomParameter, socketParameter, sectionParameter, decoretionParameter);
        }
    
        public virtual int DeleteBuilding(string buildingKadastr)
        {
            var buildingKadastrParameter = buildingKadastr != null ?
                new ObjectParameter("buildingKadastr", buildingKadastr) :
                new ObjectParameter("buildingKadastr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBuilding", buildingKadastrParameter);
        }
    
        public virtual int DeleteFlat(Nullable<int> flatId)
        {
            var flatIdParameter = flatId.HasValue ?
                new ObjectParameter("FlatId", flatId) :
                new ObjectParameter("FlatId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFlat", flatIdParameter);
        }
    
        public virtual int DeleteRoom(Nullable<int> roomId)
        {
            var roomIdParameter = roomId.HasValue ?
                new ObjectParameter("RoomId", roomId) :
                new ObjectParameter("RoomId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRoom", roomIdParameter);
        }
    
        public virtual ObjectResult<GetFlats_Result> GetFlats(string buildingKadastr)
        {
            var buildingKadastrParameter = buildingKadastr != null ?
                new ObjectParameter("buildingKadastr", buildingKadastr) :
                new ObjectParameter("buildingKadastr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFlats_Result>("GetFlats", buildingKadastrParameter);
        }
    
        public virtual ObjectResult<GetRooms_Result> GetRooms(Nullable<int> flatId)
        {
            var flatIdParameter = flatId.HasValue ?
                new ObjectParameter("FlatId", flatId) :
                new ObjectParameter("FlatId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRooms_Result>("GetRooms", flatIdParameter);
        }
    }
}
